/*
 * tests/matrix/BasicAPIUTest.cxxtest
 *
 * Most basic, simplest API test, verifies that core matrix functions work.
 * Copyright (C) 2018 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>

#include "../query/test-types.h"

using namespace opencog;
using namespace std;

class BasicAPIUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval *eval;

	public:

	BasicAPIUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);
#include "../query/test-types.cc"
	}

	~BasicAPIUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);

	void tearDown(void);

	// First, check the basics, before doing more advanced stuff!
	void test_basic(void);
	void test_marginals(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void BasicAPIUTest::setUp(void)
{
	as = new AtomSpace();
	eval = new SchemeEval(as);

	// Proper UTF-8 behaviour requires the right locale.
	// Do not use LC_ALL, as otherwise the printing of the numeric
	// quantities (immediately below) get commas, not decimal points,
	// in the majority of European locales. Unfortunately, guile number
	// parsing is not locale dependent...
	// eval->eval("(setlocale LC_ALL \"\")");
	eval->eval("(setlocale LC_CTYPE \"\")");
	eval->clear_pending();

	eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	eval->eval("(add-to-load-path \"../../..\")");

	eval->eval("(load-from-path \"tests/matrix/basic-api.scm\")");
	eval->eval("(load-from-path \"tests/query/test_types.scm\")");
}

void BasicAPIUTest::tearDown(void)
{
	delete eval;
	eval = NULL;
}

#define CHKERR \
	TSM_ASSERT("Caught scm error during eval", \
		(false == eval->eval_error()));

#define CHKPRT(X) printf("Got >>%s<<\n", X.c_str()); CHKERR;

#define CHKNUM(MSG,X,VAL) \
	printf("Got %s=%s", MSG, X.c_str()); \
	CHKERR; \
	TSM_ASSERT_EQUALS(MSG, atoi(X.c_str()), VAL);

#define EPS 1.0e-9

#define CHKFLT(MSG,X,VAL) \
	printf("Got %s=%s", MSG, X.c_str()); \
	CHKERR; \
	TSM_ASSERT_LESS_THAN(MSG, atof(X.c_str()), VAL+EPS); \
	TSM_ASSERT_LESS_THAN(MSG, VAL-EPS, atof(X.c_str()));

// ============================================================

void BasicAPIUTest::test_basic(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	std::string rc = eval->eval("(load-from-path \"tests/matrix/basic-data.scm\")");
	printf("Load of data >>>%s", rc.c_str());
	CHKERR;

	std::string tru = eval->eval("(eq? 'WordNode (bapi 'left-type))");
	printf ("Got >>>%s", tru.c_str());
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(eq? 'WordNode (bapi 'right-type))");
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(equal? \"unit-test-demo\" (bapi 'id))");
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(equal? chicken-legs (bapi 'item-pair chicken-legs-pair))");
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(equal? 3.0 (bapi 'pair-count chicken-legs-pair))");
	printf ("Got >>>%s", tru.c_str());
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	logger().debug("END TEST: %s", __FUNCTION__);
}

// ============================================================

void BasicAPIUTest::test_marginals(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	std::string rc = eval->eval("(load-from-path \"tests/matrix/basic-data.scm\")");
	printf("Load of data >>>%s", rc.c_str());
	CHKERR;

	// -------------------------------------------------------------
	// Where the data will go
	rc = eval->eval("(use-modules (opencog persist-sql))");
	CHKERR;

	rc = eval->eval("(sql-open \"postgres:///opencog_test?user=opencog_tester&password=cheese\")");
	CHKERR;

	// Compute and store all marginals
	rc = eval->eval("(batch-all-pair-mi bapi)");
	printf("Batch >>>%s", rc.c_str());
	CHKERR;

	rc = eval->eval("(sql-close)");
	CHKERR;

	printf("---------------------------------------------------------\n");
	// Verify that the marginals were correctly computed
	std::string num = eval->eval("(fapi 'left-basis-size)");
	CHKNUM("Left size", num, 3);

	num = eval->eval("(fapi 'right-basis-size)");
	CHKNUM("Right size", num, 4);

	num = eval->eval("(fapi 'wild-wild-count)");
	CHKNUM("Wild-wild count", num, 22);

	num = eval->eval("(length (fapi 'right-stars (Word \"chicken\")))");
	CHKNUM("chicken stars", num, 3);

	num = eval->eval("(length (fapi 'right-stars (Word \"dog\")))");
	CHKNUM("dog stars", num, 3);

	num = eval->eval("(length (fapi 'right-stars (Word \"table\")))");
	CHKNUM("table stars", num, 1);

	num = eval->eval("(length (fapi 'left-stars (Word \"legs\")))");
	CHKNUM("legs stars", num, 3);

	num = eval->eval("(length (fapi 'left-stars (Word \"eyes\")))");
	CHKNUM("eyes stars", num, 2);

	num = eval->eval("(length (fapi 'left-stars (Word \"wings\")))");
	CHKNUM("wings stars", num, 1);

	num = eval->eval("(length (fapi 'left-stars (Word \"snouts\")))");
	CHKNUM("snouts stars", num, 1);

	printf("---------------------------------------------------------\n");
	// Verify that the support API is not insane
	num = eval->eval("(papi 'right-support (Word \"chicken\"))");
	CHKNUM("chicken support", num, 3);

	num = eval->eval("(papi 'right-support (Word \"dog\"))");
	CHKNUM("dog support", num, 3);

	num = eval->eval("(papi 'right-support (Word \"table\"))");
	CHKNUM("table support", num, 1);

	num = eval->eval("(papi 'left-support (Word \"legs\"))");
	CHKNUM("legs support", num, 3);

	num = eval->eval("(papi 'left-support (Word \"eyes\"))");
	CHKNUM("eyes support", num, 2);

	num = eval->eval("(papi 'left-support (Word \"wings\"))");
	CHKNUM("wings support", num, 1);

	num = eval->eval("(papi 'left-support (Word \"snouts\"))");
	CHKNUM("snouts support", num, 1);

	printf("---------------------------------------------------------\n");
	// Verify that the count API is not insane
	num = eval->eval("(papi 'right-count (Word \"chicken\"))");
	CHKNUM("chicken count", num, 11);

	num = eval->eval("(papi 'right-count (Word \"dog\"))");
	CHKNUM("dog count", num, 7);

	num = eval->eval("(papi 'right-count (Word \"table\"))");
	CHKNUM("table count", num, 4);

	num = eval->eval("(papi 'left-count (Word \"legs\"))");
	CHKNUM("legs count", num, 11);

	num = eval->eval("(papi 'left-count (Word \"eyes\"))");
	CHKNUM("eyes count", num, 4);

	num = eval->eval("(papi 'left-count (Word \"wings\"))");
	CHKNUM("wings count", num, 6);

	num = eval->eval("(papi 'left-count (Word \"snouts\"))");
	CHKNUM("snouts count", num, 1);

	printf("---------------------------------------------------------\n");
	// Verify that the compute-support object functions correctly
	num = eval->eval("(length (pcmp 'right-support-set (Word \"chicken\")))");
	CHKNUM("chicken support set size", num, 3);

	num = eval->eval("(pcmp 'right-support (Word \"chicken\"))");
	CHKNUM("chicken support", num, 3);

	num = eval->eval("(pcmp 'right-support (Word \"dog\"))");
	CHKNUM("dog support", num, 3);

	num = eval->eval("(pcmp 'right-support (Word \"table\"))");
	CHKNUM("table support", num, 1);

	num = eval->eval("(pcmp 'left-support (Word \"legs\"))");
	CHKNUM("legs stars", num, 3);

	num = eval->eval("(pcmp 'left-support (Word \"wings\"))");
	CHKNUM("wings stars", num, 1);

	num = eval->eval("(pcmp 'left-support (Word \"eyes\"))");
	CHKNUM("eyes stars", num, 2);

	num = eval->eval("(pcmp 'left-support (Word \"snouts\"))");
	CHKNUM("snouts stars", num, 1);

	num = eval->eval("(pcmp 'total-support)");
	CHKNUM("total support", num, 7);

	num = eval->eval("(pcmp 'total-count)");
	CHKNUM("total count", num, 22);

	printf("---------------------------------------------------------\n");
	// Verify marginal frequencies
	num = eval->eval("(fapi 'right-wild-freq (Word \"chicken\"))");
	CHKFLT("chicken wild-freq", num, 11.0/22.0);

	num = eval->eval("(fapi 'right-wild-freq (Word \"dog\"))");
	CHKFLT("dog wild-freq", num, 7.0/22.0);

	num = eval->eval("(fapi 'right-wild-freq (Word \"table\"))");
	CHKFLT("table wild-freq", num, 4.0/22.0);

	printf("---------------------------------------------------------\n");
	// Verify that the central-compute object computes stuff correctly

	// 3 3 1 are the chicken,dog,table supports while 11 7 4 are the counts.
	num = eval->eval("(cent 'left-support)");
	CHKFLT("total left support", num, (3.0*(11.0/22) + 3.0*(7.0/22.0) + (4.0/22.0)));

	// 3 2 1 1 are the legs,eyes,wings,snouts supports while 11 4 6 1 are the counts
	num = eval->eval("(cent 'right-support)");
	CHKFLT("total right support", num,
		(3.0*(11.0/22.0) + 2.0*(4.0/22.0) + (6.0/22.0) + (1.0/22.0)));

	num = eval->eval("(cent 'left-count)");
	CHKFLT("total left count", num, (11.0*(11.0/22) + 7.0*(7.0/22.0) + 4.0*(4.0/22.0)));

	num = eval->eval("(cent 'right-count)");
	CHKFLT("total right count", num,
		(11.0*(11.0/22.0) + 4.0*(4.0/22.0) + 6.0*(6.0/22.0) + (1.0/22.0)));

	printf("---------------------------------------------------------\n");
	// Verify that the report objects reports the marginals correctly
	num = eval->eval("(rapi 'left-dim)");
	CHKNUM("left dimension", num, 3);

	num = eval->eval("(rapi 'right-dim)");
	CHKNUM("right dimension", num, 4);

	num = eval->eval("(rapi 'num-pairs)");
	CHKNUM("num-pairs", num, 7);

	num = eval->eval("(rapi 'total-count)");
	CHKNUM("total-count", num, 22);

	num = eval->eval("(rapi 'total-mi)");
	printf ("Got >>>%s", num.c_str());

	// See above for explanation of magic formula
	num = eval->eval("(rapi 'left-support)");
	CHKFLT("report left support", num, (3.0*(11.0/22) + 3.0*(7.0/22.0) + (4.0/22.0)));

	num = eval->eval("(rapi 'right-support)");
	CHKFLT("report right support", num,
		(3.0*(11.0/22.0) + 2.0*(4.0/22.0) + (6.0/22.0) + (1.0/22.0)));

	num = eval->eval("(rapi 'left-count)");
	CHKFLT("report left count", num, (11.0*(11.0/22) + 7.0*(7.0/22.0) + 4.0*(4.0/22.0)));

	num = eval->eval("(rapi 'right-count)");
	CHKFLT("report right count", num,
		(11.0*(11.0/22.0) + 4.0*(4.0/22.0) + 6.0*(6.0/22.0) + (1.0/22.0)));

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
