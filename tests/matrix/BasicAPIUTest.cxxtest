/*
 * tests/matrix/BasicAPIUTest.cxxtest
 *
 * Most basic, simplest API test, verifies that core matrix functions work.
 * Copyright (C) 2018 Linas Vepstas <linasvepstas@gmail.com>
 * All Rights Reserved
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License v3 as
 * published by the Free Software Foundation and including the exceptions
 * at http://opencog.org/wiki/Licenses
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program; if not, write to:
 * Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#include <math.h>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/util/Logger.h>

#include "../query/test-types.h"

using namespace opencog;
using namespace std;

class BasicAPIUTest :  public CxxTest::TestSuite
{
	private:
		AtomSpace *as;
		SchemeEval *eval;

	public:

	BasicAPIUTest(void)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_print_to_stdout_flag(true);
#include "../query/test-types.cc"
	}

	~BasicAPIUTest()
	{
		// erase the log file if no assertions failed
		if (!CxxTest::TestTracker::tracker().suiteFailed())
			std::remove(logger().get_filename().c_str());
	}

	void setUp(void);

	void tearDown(void);

	// First, check the basics, before doing more advanced stuff!
	void test_basic(void);
};

/*
 * This is called once before each test, for each test (!!)
 */
void BasicAPIUTest::setUp(void)
{
	as = new AtomSpace();
	eval = new SchemeEval(as);

	// Proper UTF-8 behaviour requires the right locale.
	// Do not use LC_ALL, as otherwise the printing of the numeric
	// quantities (immediately below) get commas, not decimal points,
	// in the majority of European locales. Unfortunately, guile number
	// parsing is not locale dependent...
	// eval->eval("(setlocale LC_ALL \"\")");
	eval->eval("(setlocale LC_CTYPE \"\")");
	eval->clear_pending();

	eval->eval("(add-to-load-path \"" PROJECT_SOURCE_DIR "\")");
	eval->eval("(add-to-load-path \"../../..\")");

	eval->eval("(load-from-path \"tests/matrix/basic-api.scm\")");
	eval->eval("(load-from-path \"tests/query/test_types.scm\")");
}

void BasicAPIUTest::tearDown(void)
{
	delete eval;
	eval = NULL;
}

#define CHKERR \
	TSM_ASSERT("Caught scm error during eval", \
		(false == eval->eval_error()));

// ============================================================

void BasicAPIUTest::test_basic(void)
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	std::string rc = eval->eval("(load-from-path \"tests/matrix/basic-data.scm\")");
	printf("Load of data >>>%s", rc.c_str());
	CHKERR;

	eval->eval("(define bapi (make-basic-api))");
	CHKERR;

	std::string tru = eval->eval("(eq? 'WordNode (bapi 'left-type))");
	printf ("Got >>>%s", tru.c_str());
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(eq? 'WordNode (bapi 'right-type))");
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(equal? chicken-legs (bapi 'item-pair chicken-legs-pair))");
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	tru = eval->eval("(equal? 3.0 (bapi 'pair-count chicken-legs-pair))");
	printf ("Got >>>%s", tru.c_str());
	CHKERR; TSM_ASSERT_EQUALS("Expecting #t", tru, "#t\n");

	logger().debug("END TEST: %s", __FUNCTION__);
}

/* ============================= END OF FILE ================= */
